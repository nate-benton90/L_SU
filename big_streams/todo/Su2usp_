#! /usr/bin/perl -w

# Program name: Su2usp_
# 
# Purpose: To convert su data to usp data
# Date: Oct. 15, 2011
# Author: Juan Lorenzo
# V. 1.0

# LOAD GENERAL PERL LIBRARY
   use lib './libAll';  

# Use shell transparently to locate home directory before compilation
   my $library_location;

   BEGIN {
     use Shell qw(echo);
     $home_directory = ` echo \$HOME`;
     chomp $home_directory;
     $library_location = $home_directory.'/lsu/libAll';
   }

# LOAD GENERAL PERL LIBRARY
  use lib $library_location;

# define library of system subroutines 
  use lib '/usr/local/pl';
  use manage_files_by;

# define system library path
  use lib '/usr/local/pl/libAll';

# import system variables
  use SeismicUnix qw ($suffix_segy $suffix_su $suffix_usp);

# define local library path
  use lib './libAll';
  use System_Variables2;

# use stdin stdout
#  use Su2usp qw ($file_name);

# import system variables
  my ($DATA_SEISMIC_SEGY) = System_Variables2::DATA_SEISMIC_SEGY();
  my ($DATA_SEISMIC_USP) = System_Variables2::DATA_SEISMIC_USP();
  my ($DATA_SEISMIC_SU) = System_Variables2::DATA_SEISMIC_SU();
  my ($date)		= System_Variables2::date();


  $sufile_in[1]		= <$ARGV[0]>;
  $uspfile_out[1]	= <$ARGV[1]>;

  if (<$ARGV[0]> eq '')  {
	print("\nusage: Su2usp_ complete file name including idirectory \n \\
		path if need be\n");
	die("For example: Su2usp_ path1/input.usp path2/output.su  \n\n");
  }

  $inbound_segyhdrs[1]	= $sufile_in[1];
  $outbound_segywrite[1]= '.temp';

  $inbound_segy2usp[1]	= '.temp';
  $outbound_segy2usp[1] = $uspfile_out[1];

# create segy binary and ascii header using seismic unix file
  $segyhdrs[1]		= ("  segyhdrs  		\\
			bfile=$DATA_SEISMIC_SU/binary	\\
			hfile=$DATA_SEISMIC_SU/header	\\
			");
# DEFINE SU MODULES
  $segywrite[1]		= (" segywrite			\\
			bfile=$DATA_SEISMIC_SU/binary	\\
			hfile=$DATA_SEISMIC_SU/header	\\
			");

# DEFINE FLOW(S)
		$flow[1]  = (" $segyhdrs[1] 		\\
			< $inbound_segyhdrs[1]  |	\\
			$segywrite[1]			\\
			tape=$outbound_segywrite[1]	\\
		");
# DEFINE FLOW(S)
		$flow[2]  = (" segy2usp 		\\
			-N $inbound_segy2usp[1]  	\\
			-O $outbound_segy2usp[1]	\\
		");
						 
# RUN FLOW(S)
 system $flow[1]; 
 #system 'echo', $flow[1];

 system $flow[2]; 
 #system 'echo', $flow[2];

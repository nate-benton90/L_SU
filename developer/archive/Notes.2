
Two types of flow types exist-- those built by the user and those that are pre-built 'superflows'.

User-built flows ( 4 colros) diverge from 'grey_flow.pm', pink_flow.pm, etc.

sunix_select.pm uses the 'netutral_flow.pm' 

Superflows diverge from L_SU via pre_built-sueprflow.pm

User-built flows can be of 4 colors.


The namespaces for each are independent for the most part. 

There are two sets of dialogs for interacting with files and directories.

The Save and Run have their own logic separated paths (L_SU, run_button and L_SU, save_button)

The SaveAs and Data and Flow have their own logic path through L_SU, FileDialog_button

If there are superflow bindings for opening data files, then these use L_SU, _FileDialog_button

If there are bindings for user-build programs (such as the sunix programs) then these use FileDialog_button that
lies within each of the flows: e.g. grey_flow.pm, pink_flow.pm, etc.


Differences between the following packages:

whereami: temporarily establish the widget you are in
  and determine which condition you are using in a namespace 
  outside that of the main program
 
conditions_gui: temporarily establishes the widget in a private hash 
  within the namespace of the main program and hence accessible to all 
  local methods
  disables or enables certain widgets
  keeps track of flow index
  All values that enter have a chance of being changed.
  Internally a new set of private variable siscast from the hash that is entered.

decisions:
  Judges conditions for making choices automatically
  the namespace.
  
Superflows/tools read configuration files and write configuration files
   using internal libraries, i.e. not Config-Simple
   configuration parameters are found in arrays and not in hashes as for
   the outside libraries of Config-Simple
 
 For Project.config there is no local configuration file.  Thi superflow is
 handled by project_selector gui.
 
 Other superflows can have a local configuration file( e.e iSpectralAnalysis.config)
 Make sure that your local configuration file also gets updated accordingly if you cahnge
 the master iSpectralAnalysis.config
 
Main: select_superflow
 
       calls superflow_configs:
 
               calls config_superflows: reads variables using readfiles.pm
 
 		calls param_widgets sets the variables for duplicated in a separate namespace too
 
 
 How to add individual parameters to the GUI for a single specific superflow, 
 e.g., parameter "geopsy" in "Project"
 
 
 (1) add new variables in
 				   master file:			 ~/big_streams/config/Project.config
 				   and in the files:	 ~/.L_SU/configuration/active./Project.config
 				   	              		 ~/.L_SU/configuration/"project_name"/Project.config     
 (2) Modify:  package    ~/big_streams/config/Project.pm
 
 	At line ~ 49, 	add key and value to  $Project hash: _geopsy_is_selected				=> '',
 
 	At line ~ 362, in sub _change_basic_dirs,
 
 	Add "$geopsy_logic" to line ~ 363:  e.g.,  my ($geomaps_logic, $geopsy_logic);
 	Add new line ~209:	 $geopsy_logic		  = $control->set_str2logic($CFG[25]);
 	Add new line ~453:  			    	  	
 			    	 $Project  ->{_geopsy_is_selected} = $geopsy;    	  		
 	Add new line ~ 270: _geopsy_is_selected	=>  $geopsy_logic,	
 
 	Add if clause at line ~ 1734 : 	if ( $Project->{_geopsy_is_selected} ) {
 							manage_dirs_by::make_dir($GEOPSY);
							manage_dirs_by::make_dir($GEOPSY_PARAMS);
 							manage_dirs_by::make_dir($GEOPSY_PICKS); 
 							manage_dirs_by::make_dir($GEOPSY_PROFILES);
 							manage_dirs_by::make_dir($GEOPSY_REPORTS);
							manage_dirs_by::make_dir($GEOPSY_TARGETS);
 						}		
 		 
 	Modify ~ line 1946:  increase value of $max_index by 1
 	
 						sub get_max_index {
 							my ($self) = @_;
 
 							my $max_index = 12;
 	
 							return($max_index);
 						}	
 						
 						
 	Add ~ line 98: 	_GEOPSY							=> '',
					_GEOPSY_PARAMS					=> '',
					_GEOPSY_PICKS					=> '',	
					_GEOPSY_PROFILES				=> '',
					_GEOPSY_REPORTS					=> '',
					_GEOPSY_TARGETS					=> '',
 	
 	Add ~ line 528: 
# GEOPSY DIRECTORY SURFACE WAVE MODELING
   my $GEOPSY              	= $SEISMIC.'/geopsy/'.$DATE_LINE_COMPONENT_STAGE_PROCESS.'/'.$subUser;
   my $GEOPSY_PARAMS        = $SEISMIC.'/geopsy/'.$DATE_LINE_COMPONENT_STAGE_PROCESS.'/'.$subUser.'/'.'params';
   my $GEOPSY_PICKS         = $SEISMIC.'/geopsy/'.$DATE_LINE_COMPONENT_STAGE_PROCESS.'/'.$subUser.'/'.'picks';
   my $GEOPSY_PROFILES      = $SEISMIC.'/geopsy/'.$DATE_LINE_COMPONENT_STAGE_PROCESS.'/'.$subUser.'/'.'profiles';
   my $GEOPSY_REPORTS       = $SEISMIC.'/geopsy/'.$DATE_LINE_COMPONENT_STAGE_PROCESS.'/'.$subUser.'/'.'reports';       
   my $GEOPSY_TARGETS       = $SEISMIC.'/geopsy/'.$DATE_LINE_COMPONENT_STAGE_PROCESS.'/'.$subUser.'/'.'targets';
 	
 	Add the following ~ line 737:
 	 $Project->{_GEOPSY}						= $GEOPSY;
 	$Project->{_GEOPSY_PARAMS}				= $GEOPSY_PARAMS;
 	$Project->{_GEOPSY_PICKS}				= $GEOPSY_PICKS;
 	$Project->{_GEOPSY_PROFILES}			= $GEOPSY_PROFILES;
 	$Project->{_GEOPSY_REPORTS}				= $GEOPSY_REPORTS;
  	$Project->{_GEOPSY_TARGETS}				= $GEOPSY_TARGETS;
 						 
    Add the following ~ line 832:
    
# GEOPSY DIRECTORY SURFACE WAVE MODELING
   my $GEOPSY              	= $SEISMIC.'/geopsy/'.$DATE_LINE_COMPONENT_STAGE_PROCESS.'/'.$subUser;
   my $GEOPSY_PARAMS          = $SEISMIC.'/geopsy/'.$DATE_LINE_COMPONENT_STAGE_PROCESS.'/'.$subUser.'/'.'params';
   my $GEOPSY_PICKS          = $SEISMIC.'/geopsy/'.$DATE_LINE_COMPONENT_STAGE_PROCESS.'/'.$subUser.'/'.'picks';
   my $GEOPSY_PROFILES      = $SEISMIC.'/geopsy/'.$DATE_LINE_COMPONENT_STAGE_PROCESS.'/'.$subUser.'/'.'profiles';
   my $GEOPSY_REPORTS       = $SEISMIC.'/geopsy/'.$DATE_LINE_COMPONENT_STAGE_PROCESS.'/'.$subUser.'/'.'reports';       
   my $GEOPSY_TARGETS       = $SEISMIC.'/geopsy/'.$DATE_LINE_COMPONENT_STAGE_PROCESS.'/'.$subUser.'/'.'targets';
    
    
    Add the following ~ line 1042:
    $Project->{_GEOPSY}						= $GEOPSY;
    $Project->{_GEOPSY_PARAMS}				= $GEOPSY_PARAMS;
 	$Project->{_GEOPSY_PICKS}				= $GEOPSY_PICKS;	
 	$Project->{_GEOPSY_PROFILES}			= $GEOPSY_PROFILES;
 	$Project->{_GEOPSY_REPORTS}				= $GEOPSY_REPORTS;	
 	$Project->{_GEOPSY_TARGETS}				= $GEOPSY_TARGETS;						
          
    
  Add new subroutines as needed , e.g., near lines 1421
  
   sub GEOPSY {
	_basic_dirs();
	_system_dirs();
		my $GEOPSY= $Project->{_GEOPSY};		
        return ($GEOPSY);
}

sub GEOPSY_PARAMS {
	_basic_dirs();
	_system_dirs();
		my $GEOPSY_PARAMS= $Project->{_GEOPSY_PARAMS};		
        return ($GEOPSY_PARAMS);
}

sub GEOPSY_PICKS {
	_basic_dirs();
	_system_dirs();
		my $GEOPSY_PICKS= $Project->{_GEOPSY_PICKS};		
        return ($GEOPSY_PICKS);
}

sub GEOPSY_PROFILES {
	_basic_dirs();
	_system_dirs();
		my $GEOPSY_PROFILES= $Project->{_GEOPSY_PROFILES};
        return ($GEOPSY_PROFILES);
}

sub GEOPSY_REPORTS {
	_basic_dirs();
	_system_dirs();
		my $GEOPSY_REPORTS= $Project->{_GEOPSY_REPORTS};		
        return ($GEOPSY_REPORTS);
}
 	
 	
 	Add the following ~ line: 1704
 	my $GEOPSY				= $Project->{_GEOPSY};
	my $GEOPSY_PARAMS		= $Project->{_GEOPSY_PARAMS};
	my $GEOPSY_PICKS		= $Project->{_GEOPSY_PICKS};
	my $GEOPSY_PROFILES		= $Project->{_GEOPSY_PROFILES};	
	my $GEOPSY_REPORTS		= $Project->{_GEOPSY_REPORTS};
	my $GEOPSY_TARGETS		= $Project->{_GEOPSY_TARGETS};		    	 
 
 
 
  	Add the following ~ line: 1739
 
	if ( $Project->{_geopsy_is_selected} ) {
		manage_dirs_by::make_dir($GEOPSY);
		manage_dirs_by::make_dir($GEOPSY_PARAMS);
 		manage_dirs_by::make_dir($GEOPSY_PICKS); 
 		manage_dirs_by::make_dir($GEOPSY_PROFILES);
 		manage_dirs_by::make_dir($GEOPSY_REPORTS);
		manage_dirs_by::make_dir($GEOPSY_TARGETS);
	}
 
 
	   	  		

How to Add a Completely New Superflow:
Example files needed:   synseis        (only master)
					    synseis.config (master and local versions)
						synseis_config (only master)
						synseis_spec.pm
						
Modify		    big_streams/config/synseis_config.pm

Change the number#		    \@{$superflow_config_names}[#];

This is the same sequence number as in 
		array: @superflow_config_names;

		Look for array sequence in the package: SeismicUnixPlTk_global_constants.pm
		After Line 80.

for example for synseis:    \@{$superflow_config_names}[8];
for example for Sseg2su:    \@{$superflow_config_names}[9];

						
Modify          misc/SeismicUnixPlTk_global_constants

		    At: Line 85  change 'temp' to 'synseis'
		    	Line 98  change 'temp' to 'synseis';
		    	Line 22  change 'temp' to 'synseis';
		        Line 38  change 'temp' to 'synseis';

Modify 			LSU.pl: button options: append an additional 
					$args variable after the last $args[#] =
				
			 	$superflow_select	 ->configure(
			   -menu 	=> $top_menu_bar
                           );

 		    $args[6] = $superflow_names->{_synseis};
 			$superflow_select	->command(
    			  -label       	=> $args[6],
    			  -underline   	=> 0,
    			  -font 		=>$garamond,
		          -command      =>[\&superflow_select,\$args[6] ],
 			 );
 			 
 			
 Modify        misc/config_superflows.pm
 
 Lines 291 to 296 change 'temp' with 'synseis'
 				    
     if ($$program_name_sref eq $superflow_names->{_synseis} ) {
					# warning: must omit underscore
					#print("config_superflows, set_program_name,superflow_names=$superflow_names->{_ProjectVariables}\n");
					#print("config_superflows, set_program_name,alias superflow_names=$superflow_names->{_ProjectVariables}\n");
         $name_sref 	= \$alias->{synseis};
     }
     
     ( I have left a "temp" example you can replace);
     
 
 Modify the main program, e.g.  synseis ,
 							    Sudipfilt,
 							    Seg2su etc.,
 							    
 		so that it can import values from the configuration file
        by adding the following lines, as an example for synseis:
 
     use synseis_config;
     my $synseis_config = synseis_config->new();
     
=head2 Get configuration information

=cut

	my ($CFG_h,$CFG_aref) 			= $synseis_config->get_values();
     
 =head2 set the different parameters

  includes  variables

=cut
    my $data_name						= $CFG_h->{synseis}{1}{data_name};
	my $time_sampling_interval_s 		= $CFG_h->{synseis}{1}{time_sampling_interval_s};

 	my $depth_sampling_interval_m       = $CFG_h->{synseis}{1}{depth_sampling_interval_m};
  	my $Ricker_endtime					= $CFG_h->{synseis}{1}{Ricker_endtime}; 
 	my $Ricker_frequency				= $CFG_h->{synseis}{1}{Ricker_frequency}; 
   	my $plot_density_max 				= $CFG_h->{synseis}{1}{plot_density_max}; 
  	my $plot_density_min 				= $CFG_h->{synseis}{1}{plot_density_min}; 
  	my $plot_depth_min_m 				= $CFG_h->{synseis}{1}{plot_depth_min_m }; 
  	my $plot_depth_max_m 				= $CFG_h->{synseis}{1}{plot_depth_max_m}; 
  	my $plot_time_min_s					= $CFG_h->{synseis}{1}{plot_time_min_s}; 
  	my $plot_time_max_s					= $CFG_h->{synseis}{1}{plot_time_max_s}; 
  	my $plot_velocity_min				= $CFG_h->{synseis}{1}{plot_velocity_min}; 
  	my $plot_velocity_max				= $CFG_h->{synseis}{1}{plot_velocity_max}; 
  	my $plot_reflection_coefficient_min	= $CFG_h->{synseis}{1}{plot_reflection_coefficient_min};
  	my $plot_reflection_coefficient_max	= $CFG_h->{synseis}{1}{plot_reflection_coefficient_max}; 
 	my $water_depth_m 					= $CFG_h->{synseis}{1}{water_depth_m}; 
 	my $plot_ss_amplitude_max			= $CFG_h->{synseis}{1}{plot_ss_amplitude_max}; 
 	my $plot_ss_amplitude_min			= $CFG_h->{synseis}{1}{lot_ss_amplitude_min};
 	
 	
 	
 	Also create specs/synseis_spec.pm for superflows
 	Usually only the max index number has to be changes to the number of variables -1.
 			    	  		
 
 
 How Entry Labels, Values and Checkbuttons work:
 
 Initially, when L_SU starts the checkbutton widgets and values 
 are green ("on") or red ("off"), and Labels and Entry Widgets are made blank.
 e.g., using $param_widgets->initialize_labels
 
What happens when changes are made to individual parameters (Entry widget changes) -nothing
because currently a change is not assessed.

What happens now is that a subroutine ("param_widgets, changes") is called from the Entry widget when
the user moves between entry widgets and the index value is detected.
This index could be used to compare the current and past value of the parameter space. However, historical
versions of the parameters would have to be stored, made possible via the param_flow package or param_widgets package.
On the other hand it is simple if this index could be assumed to always represent a change and 
to so to always confirm that "specs" files are not being violated.
TODO Idea: build program behaviors using spec files
   * good conditions for  program 1 * bad conditions for program 1, e.g.,
   
   SUXIMAGE perc_exists = true * absolute_clip exists  = true  (prod = 1)   is a bad   combination
            perc_exists = true * absolute_clip exists  = false (prod = 0)   is a good  combination   
            perc_exists = false * absolute_clip exists = true  (prod = 0)   is a good  combination 
            
   SYNSEIS superflow:     Ricker_exists = true  * real_source_exists = true  (prod = 1) is a bad combination
         				  Ricker_exists = false * real_source_exists = true  (prod = 0) is a good combination
          			  	  Ricker_exists = false * real_source_exists = true  (prod = 0) is a good combination
 	incompatible index_pairs_array=  [0 0 1 4 6 8]
 	
 	e.g., incompatible_items_aref A [1] * incompatible_items_aref B [4] (prod = 1) or (prod = 0)
 	where $good = 0 and $bad = 1
 	so if ($good)  the proceed
 	so if ($bad)   provide error message 
 	

 For the case of Superflows, redisplay the values that exist stored in param_flow:
                $param_widgets->set_values($TkPl_SU->{_values_aref});
		 		$param_widgets->redisplay_values();
		 		
 For the case of regular user-made flows:
                $param_widgets->set_values($TkPl_SU->{_values_aref});
		 		$param_widgets->redisplay_values();
		 		
 redisplay_values controls the behavior of the entry widget. Currently each entry widget returns its
 own index.  TODO This index could be used to check the appropriateness of the change to the Entry value
 every time it is redisplayed.  For this situation the values and labels for reach program should be in a predictable order
(an array reference).
 
 
 Also, whenever a seismic unix program is clicked within the flow_listbox (left or right)
 (NOT the seismic unix selection listbox), the parameters are redisplayed
  
  sub called: 	flow_select       (main, flow_select)
  
If selected, sub flow_select always assumes a change has been made to one of the parameters
and runs: sub local_check4changes();   (main, flow_select, local_check4changes)
sub local_check4changes: 
							 -finds out which program was just touched
		                     -assumes all prior programs touched have
		                     modified parameters 
		                     -updates the touched program's stored values


The only place that a flow is checked for how correct its parameters are will be at the
time the perl file is run. Programs and their paramters are checked out against the requirements of the spec
files for the individual programs e.g., suximage.spec

How do I modify a "sunix-type" file? July 24 2018

e.g., data_in.pm

- Add appropriate subroutines
- Thange the following files:  data_in.pm data_in_spec.pm, data_in.config
- there may be (not always) are required change in the subroutines that write oout
 the perl flows.  
 - The perl parser that reads in the perl flow created by L_SU may also
 need some changes. 

Changing ~big_streams/config/data_in.config: before:

data_name    = ''

       ~big_streams/config/ data_in.config: now : 
      
base_file_name                =  'nu'
type						  =  'su'

Changing data_in_spec.pm; before:  N/A

Changing data_in.pm  The value of the maximum index  
is one larger than the number of elements available
to the user in the GUI


before:  N/A

before:

 sub get_max_index {
 	my ($self) = @_;
 	# file_name : index=0
 	my $max_index = 0;
 	
 	return($max_index);
 }

after:

 sub get_max_index {
 	my ($self) = @_;
 	# base_file_name : index=0	
 	# type      : index=1
 	my $max_index = 1;
 	
 	return($max_index);
 }

- Update to the output perl flow:

Saving a file, will involve:

main, L_SU; grey_flow; files_LSU, save; oop_text; pod_header, section
main, L_SU; grey_flow; files_LSU, save; oop_text; use_pkg, section			
main; L_SU; grey_flow; files_LSU, save; oop_text; instantiation, set_prog_names_aref
      V0.0.2 July 24 2018 include data_in, exclude data_out
 		

Opening a Data file or a Perl flow, involves the following sequence:

main; L_SU, FileDialog_button; grey_flow, FileDialog_button; 
file_dialog, FileDialog_director,_set_FileDialog2user_built_flow,
_user_built_flow_open_data_file, _FileDialog, _user_built_flow_close_data_file,
file_dialog; control, set_file_name, remove_su_suffix4sref;  get_w_single _quotes(remove suffix, add single quotes);



Opening a Data file in a superflow can follow two routes:

Route 1:  selection of "File/Data" directly from the GUI menu



Route 2: _FileDFialog_button (for MB3 bindings)

How do we separate namespaces betgween pre-built superflow usage and user-built flows?
Some dialog widgets are exclusively for superflows ( superflow selection) 

Other widgvets are exclusively for user-built flows (sunix selection,add2flow ), Flows and SaveAs

Color distinguihses regular user-built flows where sunix-selection is marked with a neutral color.

Some options have no color (Flow) but do have a flow-type assigned within LSU.

Dialog types can be Data (superflow and user-built flows, directly selected or bound)
Flow or 'SaveAs'( are exclusively for user-built perl flow) Save can be for superflows or user-built flows.

Flow types can be flow_type can be 'user_built' or 'pre_built_superflow'

L_SU sets flow types and colors plus listbox logicals (e.g., _is_listobox_grey_w = 0 or false)


N.B., Historically, some conditions are repeated using different variable names, e.g. 
is_pre_built_superflow, is_sueprflow and is_sueprflow_select_button


Question: How do we add a new seismic unix module?
=head2 Instructions

=cut 


=head3  In order to create an su module, from this directory,

 you will need access to the self-instructions of the
 seismic unix module, which I find in:
  /usr/local/cwp_su_all_48/src/doc/Stripped

 1. modify the following:

  sudoc2pm.pl

  by adding a line, such as the following:
 	$file_in[0] 				= 'xgraph.Xtcwp.main';

 2. run the following:

  perl sudoc2pm.pl ( under ~L_SU)

=cut

1. modify the following file: sudoc2pm.pl  
		Add the name of a file and its path, that conatain the help instructions 
		e.g., $file_in[0] 			= 'supef.su.main.decon_shaping';
		
1. Run sudoc2pm.pl
2. Check that sunix notes match the new variables in supef.pm
3. Introduce new variable names at this moment
4. Check supef.config
5. Check supef_spec.pm
6. check supef.pm
7. Move items in 4,5,6 to ~/big_streams/config ~/specs and ~/sunix/ respectively
8. add an appropriate new line in: SeismicUnixPlTk_global_constants.pm

For example,

  # for seismic unix program options
  my @names = ("data_in", 
            "data_out", 
            "suximage", 
            "suxgraph", 
            "suxwigb",
            "sugain",
            "suwind",
            "supef",
            );
            
9. verify by adding to flow in L_SU



Q. How does LSU_project_selector create the first directories?

	
    1 superflows_config, which extends su_param::get, provides  e.g., HOME /home/gom PROJECT_HOME /home/gom/jj site San_Acacia spare_dir '' date 
    
    2. config_superflows::get_local_or_defaults uses superflows_config(above) to get e.g., HOME /home/gome PROJECT_HOME /home/gom/jj site San_Acacia spare_dir '' date
	
	3. The previous module (config_superflows) provides  L_SU_local_user_constants::_get_active_project_name with the $project_name (e.g., jj)
	
	3. L_SU_local_user_constants:: get_user_configuration_Project_config2  uses $project_name (e.g., jj) to give $Project_config2
	
	$files_LSU->{_outbound2}  = $Project_config2
	
	4. files_LSU::write2: writes $files_LSU->{_outbound2}
	
	GRAPHICS
	
	yum install ImageMagick-perl as root
	yum isntall GraphicsMagick
	yum install perl-PDL perl-PDL-Graphics-PLplot plplot-perl
	
	cpan PDL
	cpan GD
	
	
